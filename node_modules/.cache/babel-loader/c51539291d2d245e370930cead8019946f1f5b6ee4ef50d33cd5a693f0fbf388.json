{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from\"axios\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EditTableForm=_ref=>{let{table,onClose}=_ref;const navigate=useNavigate();const[MType,setMType]=useState([]);const[selected_type,setSelected_type]=useState(null);const[formData,setFormData]=useState({id:table.id,name:table.name,description:table.description||'',table_name:table.table_name,columns_selected:table.columns_selected,model_type_id:table.model_type_id,hyper_parameters:table.hyper_parameters||''});useEffect(()=>{// Fetch tasks from Flask backend using Axios\naxios.get('http://localhost:5000/boundary/viewModelType').then(response=>{setMType(response.data);console.log(response.data);}).catch(error=>{console.error('Error fetching pulling:',error);});},[]);const handleChange=e=>{const{name,value}=e.target;setFormData({...formData,[name]:value});if(name==='model_type_id'){setFormData({...formData,[name]:parseInt(value,10)||''});// Use || '' to handle NaN\n}else{setFormData({...formData,[name]:value});}};const handleSubmit=async e=>{e.preventDefault();try{formData.columns_selected=JSON.parse(formData.columns_selected);formData.hyper_parameters=JSON.parse(formData.hyper_parameters);const response=await axios.put(`http://localhost:5000/boundary/editTableConfig`,formData,{headers:{'Content-Type':'application/json'}});if(response.status===200){alert('Updated Successfully');onClose();navigate('/table');}}catch(error){alert('Update failed');onClose();navigate('/table');}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Name:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",value:formData.name,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Description:\",/*#__PURE__*/_jsx(\"textarea\",{name:\"description\",value:formData.description,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Table Name:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"table_name\",value:formData.table_name,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Columns selected eg.([\\\"a\\\", \\\"b\\\", \\\"c\\\"]):\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"columns_selected\",value:formData.columns_selected,onChange:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"type\",children:\"Model Type\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"type\",value:selected_type,onChange:e=>setSelected_type(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",disabled:true,children:\"Select Model Type\"}),MType.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type.id,children:type.type_name},type.id))]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Selected Model Type ID: \",selected_type]})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Hyper parameters:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"hyper_parameters\",value:formData.hyper_parameters,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:onClose,children:\"Cancel\"})]});};export default EditTableForm;","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsx","_jsx","jsxs","_jsxs","EditTableForm","_ref","table","onClose","navigate","MType","setMType","selected_type","setSelected_type","formData","setFormData","id","name","description","table_name","columns_selected","model_type_id","hyper_parameters","get","then","response","data","console","log","catch","error","handleChange","e","value","target","parseInt","handleSubmit","preventDefault","JSON","parse","put","headers","status","alert","onSubmit","children","type","onChange","htmlFor","disabled","map","type_name","onClick"],"sources":["/Users/lee/PycharmProjects/TrafficForecasting/frontend/src/components/EditTableForm.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst EditTableForm = ({ table, onClose }) => {\n  const navigate = useNavigate();\n  const [MType, setMType] = useState([]);\n  const [selected_type, setSelected_type] = useState(null);\n  const [formData, setFormData] = useState({\n    id: table.id,\n    name: table.name,\n    description: table.description || '',\n    table_name: table.table_name,\n    columns_selected: table.columns_selected,\n    model_type_id: table.model_type_id,\n    hyper_parameters: table.hyper_parameters || ''\n  });\n\n  useEffect(() => {\n    // Fetch tasks from Flask backend using Axios\n    axios.get('http://localhost:5000/boundary/viewModelType')\n      .then(response => {\n        setMType(response.data);\n        console.log(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching pulling:', error);\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n    if (name === 'model_type_id') {\n    setFormData({ ...formData, [name]: parseInt(value, 10) || '' }); // Use || '' to handle NaN\n      } else {\n        setFormData({ ...formData, [name]: value });\n      }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n        formData.columns_selected = JSON.parse(formData.columns_selected);\n        formData.hyper_parameters = JSON.parse(formData.hyper_parameters)\n      const response = await axios.put(`http://localhost:5000/boundary/editTableConfig`, formData, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.status === 200) {\n        alert('Updated Successfully');\n        onClose();\n        navigate('/table');\n      }\n    } catch (error) {\n      alert('Update failed');\n      onClose();\n      navigate('/table');\n    }\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n          <label>\n              Name:\n              <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n              />\n          </label>\n\n          <label>\n              Description:\n              <textarea\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleChange}\n              />\n          </label>\n\n          <label>\n              Table Name:\n              <input\n                  type=\"text\"\n                  name=\"table_name\"\n                  value={formData.table_name}\n                  onChange={handleChange}\n              />\n          </label>\n\n          <label>\n              Columns selected eg.([\"a\", \"b\", \"c\"]):\n              <input\n                  type=\"text\"\n                  name=\"columns_selected\"\n                  value={formData.columns_selected}\n                  onChange={handleChange}\n              />\n          </label>\n\n          <div>\n              <label htmlFor=\"type\">Model Type</label>\n              <select\n                  id=\"type\"\n                  value={selected_type}\n                  onChange={(e) => setSelected_type(e.target.value)}\n              >\n                  <option value=\"\" disabled>Select Model Type</option>\n                  {MType.map((type) => (\n                      <option key={type.id} value={type.id}>\n                          {type.type_name}\n                      </option>\n                  ))}\n              </select>\n              <p>Selected Model Type ID: {selected_type}</p>\n          </div>\n\n          <label>\n              Hyper parameters:\n              <input\n                  type=\"text\"\n                  name=\"hyper_parameters\"\n                  value={formData.hyper_parameters}\n                  onChange={handleChange}\n              />\n          </label>\n\n          {/* Add more input fields for other properties as necessary */}\n\n          <button type=\"submit\">Submit</button>\n          <button type=\"button\" onClick={onClose}>Cancel</button>\n      </form>\n  );\n};\n\nexport default EditTableForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}